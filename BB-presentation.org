#+Title: Introduction to Version Control/Git
#+Author: Yi Wang
#+Email: wangy95@qut.edu.au
#+REVEAL_INIT_OPTIONS: width:1200, height:800, margin: 0.1, minScale:0.2, maxScale:2.5, transition:'slide', slideNumber:true
#+OPTIONS: toc:nil
#+REVEAL_REVEAL_JS_VERSION: 4
#+REVEAL_ROOT: https://cdn.jsdelivr.net/npm/reveal.js
#+REVEAL_THEME: black
#+REVEAL_HLEVEL: 2
#+REVEAL_HEAD_PREAMBLE: <meta name="description" content="Git Introduction.">
#+REVEAL_POSTAMBLE: <p> Created by Yi Wang. </p>
#+REVEAL_EXTRA_JS:  { src: './image-size.js' }
* Why Version Control?
:LOGBOOK:
CLOCK: [2020-07-01 Wed 20:20]--[2020-07-01 Wed 20:24] =>  0:04
:END:
** The meme

[[file:version control meme.png]]
** Current situation
:LOGBOOK:
CLOCK: [2020-07-01 Wed 20:24]--[2020-07-01 Wed 20:27] =>  0:03
:END:
Research nowadays
#+ATTR_REVEAL: :frag (appear)
- involves hundreds of iterations before publication,
- spans months or years, and
- has many collaboraters.
** Problem
:LOGBOOK:
CLOCK: [2020-07-01 Wed 20:39]--[2020-07-01 Wed 20:57] =>  0:18
:END:
Given the situation, it is extremly hard, it not impossible, to achieve the following:

#+ATTR_REVEAL: :frag (appear)
- *Traceability - know how the document/project evolved over time.
- *Identifiability - track what changed by whom at when and why.
- *Clarity - multiple versions of documents can be distinguished.
- *Duplicate reduction - out-of-date and misleading copies can be safely destroyed, leaving definitive versions only.
- *Error reduction - users are less likely to access confilict document versions.
- Accident prevention - make it impossible for users to destroy a project/file.
(* Taken from: [[https://www2.le.ac.uk/services/research-data/old-2019-12-11/organise-data/version-control#:~:text=Benefits,may%20not%20be%20immediately%20apparent][Leicester University]].)
** Solution
:LOGBOOK:
CLOCK: [2020-07-01 Wed 21:02]--[2020-07-01 Wed 21:06] =>  0:04
:END:
/Incidentally/, modern Version Control checks all those points.
- [X] Traceability
- [X] Identifiability
- [X] Clarity
- [X] Duplicate reduction
- [X] Error reduction
- [X] Accident prevention
* Why do we want to use Git?
:LOGBOOK:
CLOCK: [2020-07-01 Wed 21:55]--[2020-07-01 Wed 22:10] =>  0:15
:END:
#+ATTR_REVEAL: :frag (appear)
- De-facto software for version control
- A lot of good tutorials online
- Easy to learn (maybe)
- Free, *widely* used collaboration service - GitHub

** Side note
Git - command line based tool.
SourceTree - graphical tool based on Git.

#+begin_notes
There are other more traditional graphical software that are built on top of Git.

Though I encourage everyone to use Git itself since it is more powerful, 
the demo today will be using SourceTree.
#+end_notes
* Incremental versioning 
:LOGBOOK:
CLOCK: [2020-06-29 Mon 18:37]--[2020-06-29 Mon 18:38] =>  0:01
CLOCK: [2020-06-29 Mon 11:45]--[2020-06-29 Mon 11:50] =>  0:05
:END:

** Clean layout - always
:LOGBOOK:
CLOCK: [2020-07-01 Wed 15:39]--[2020-07-01 Wed 16:15] =>  0:36
CLOCK: [2020-06-29 Mon 18:31]--[2020-06-29 Mon 18:36] =>  0:05
:END:
- We've seen this too much.
[[file:mesy%20folder.png]]
#+REVEAL: split
- With Git, your project structure is *always* clean like below.
- You *always* work on the latest version of the files.
  
[[file:clean%20structure.png]]
** Have as many versions as you want
:LOGBOOK:
CLOCK: [2020-06-29 Mon 18:36]--[2020-06-29 Mon 18:37] =>  0:01
:END:
In fact, Git encourages you to break your changes into small coherent chunks
as incremental versions.

Each line below can be considred as a version.

[[file:incremental versioning.jpg]]
* Understand your work
:LOGBOOK:
CLOCK: [2020-06-29 Mon 18:38]--[2020-06-29 Mon 18:58] =>  0:20
:END:
With Git, you understand how your 
- paper
- code
- data
evolve over time in retrospect.
* Full cooperation history
Know who changed what at when & why - line by line.

[[file:cooperation history.png]]
* Time travel to any version
:LOGBOOK:
CLOCK: [2020-06-29 Mon 19:06]--[2020-06-29 Mon 19:20] =>  0:14
:END:
Time travel to previous versions with /zero/ damage to current work.
* Work on new ideas - no worries
:LOGBOOK:
CLOCK: [2020-06-29 Mon 19:27]--[2020-06-29 Mon 19:35] =>  0:08
:END:
Experiment with new ideas in place with *zero* commitment.

** ~stash~ all your temporary work
#+ATTR_REVEAL: :frag (appear)
- New idea hits whenever it pleases.
- It hits hard especially when you are in the middle of something.
- ~git stash~ saves all your current progress from the last commit.
- Then you can start working on the new ideas.

** Getting back your work
#+ATTR_REVEAL: :frag (appear)
- When you finished with your new ideas.
- ~git stash pop~ to get back to where you left.

* A ~branch~ for a sub-project
Change code for your conference slides with *zero* damage to your main paper code.

[[file:branches.png]]
* Bring sub-projects up to speed with one command
:LOGBOOK:
CLOCK: [2020-06-30 Tue 11:48]--[2020-06-30 Tue 11:53] =>  0:05
CLOCK: [2020-06-29 Mon 20:06]--[2020-06-29 Mon 20:10] =>  0:04
:END:
Update your conference slides to use the newest changes in main paper, with *zero* manual check-copy-paste.

#+REVEAL: split
#+BEGIN_SRC ditaa :file git-rebase-branch.png :cmdline -r -s 2 

/-\  /-\  /-\  /-\
|c|->|c|->|c|->|c|     master branch (main paper)
\-/  \-/  \-/  \-/
                |
                |   /---\  /---\
                +-->|cb |->|cb |     conference branch
                    \---/  \---/
#+END_SRC

#+REVEAL: split
#+BEGIN_SRC ditaa :file git-rebase-before.png :cmdline -r -s 2 

/-\  /-\  /-\  /-\  /-------------\  /-------------\
|c|->|c|->|c|->|c|->|updated data |->|updated code |     master branch (main paper)
\-/  \-/  \-/  \-/  \-------------/  \-------------/
                |
                |   /---\  /---\
                +-->|cb |->|cb |    conference branch
                    \---/  \---/
#+END_SRC


#+REVEAL: split

#+BEGIN_SRC ditaa :file git-rebase-after.png :cmdline -r -s 2 


/-\  /-\  /-\  /-\  /-------------\  /-------------\
|c|->|c|->|c|->|c|->|updated data |->|updated code |     master branch (main paper)
\-/  \-/  \-/  \-/  \-------------/  \-------------/
                                            |
                                            |   /---\  /---\
                                            +-->|cb |->|cb |     conference branch
                                                \---/  \---/
#+END_SRC

* Collaborate like never before
This is an advanced option and requires everyone in the team to use Git.


* Clock time                                                       :noexport:

:LOGBOOK:
CLOCK: [2020-06-29 Mon 18:22]--[2020-06-29 Mon 18:30] =>  0:08
CLOCK: [2020-06-27 Sat 22:26]--[2020-06-27 Sat 22:50] =>  0:24
CLOCK: [2020-06-27 Sat 22:07]--[2020-06-27 Sat 22:18] =>  0:11
:END:



#+SETUPFILE: ../theme-readtheorg.setup
#+LATEX_HEADER: \documentclass{report}
#+LATEX_CLASS_OPTIONS: [a4paper]
#+LATEX_HEADER: \usepackage{minted}
#+LATEX_HEADER: \usepackage[total={170mm,257mm},left=20mm,right=20mm]{geometry}
#+author: Yi Wang
* Git Tutorial
:PROPERTIES:
:ID:       cb36a6d5-b776-41b3-b829-5802164656cf
:END:
:LOGBOOK:
CLOCK: [2020-06-12 Fri 08:37]--[2020-06-12 Fri 09:14] =>  0:37
CLOCK: [2020-06-10 Wed 14:43]--[2020-06-10 Wed 15:45] =>  1:02
:END:
- If you want to know whom to +blame+ (thank!) for the great choice of words.
- If you want to know why you did what you did a year ago.
- If you want to save time from manual debugging when latex freaks out again.
- If you want no more "paper-final-final-final-final.tex".
** Prerequisites
:PROPERTIES:
:ID:       f4981486-0c63-49c7-8de0-9ed71436eb7c
:END:
:LOGBOOK:
CLOCK: [2020-06-11 Thu 21:27]--[2020-06-11 Thu 21:28] =>  0:01
CLOCK: [2020-06-11 Thu 16:03]--[2020-06-11 Thu 16:41] =>  0:38
:END:

*** Terminologies
:LOGBOOK:
CLOCK: [2020-06-18 Thu 19:12]--[2020-06-18 Thu 19:21] =>  0:09
CLOCK: [2020-06-18 Thu 17:39]--[2020-06-18 Thu 17:52] =>  0:13
:END:
Here is a list of terminologies that you might find confusing, or that I think is worth mentioning.

- file(s): a /file/ in git *usually* refers to a text-based file. Usually, if a file can be opened by Notepad (Windows) or TextEdit (Mac) and still readable by a human being, it's a text file. All $\LaTeX$ source files are text-based.
- line(s): a /line/ in git is determined by a carriage. It is sometimes oversimplifyingly depicted as "\n" (not including quotes).
- change(s): in the world of git, changes refer to the creation, deletion of files, or the addition or deletion of lines inside files.
- ~cd~: this is a command that means (c)hange (d)irectory.
- ~mkdir~: this is a command that means (m)a(k)e (dir)rectory.
- commit: a record of the following:
  - the changes we made
  - the author who made the change
  - the time we made the change
  - explanation (message) on the changes
*** Commands
To make this tutorial self-contained, I used some commands that are not git-related.
Please be aware that you are not expected to know anything that does not start with ~git~ in this tutorial except for the following:

#+name: make a directory
#+caption: make a directory
#+begin_src bash -n  :dir /tmp/working-paper :results output replace code
mkdir data
#+end_src

#+name: Results: make a directory
#+RESULTS: Results: make a directory
#+begin_src bash -n
#+end_src

#+name: Results:
#+RESULTS: Results:


#+name: list the conents of a directory
#+caption: list the conents of a directory
#+begin_src bash -n  :dir /tmp/working-paper :results output replace code
ls
#+end_src

#+name: Results: list the conents of a directory
#+RESULTS: Results: list the conents of a directory
#+begin_src bash -n
data
#+end_src

#+name: Results:
#+RESULTS: Results:

#+name: change directory
#+caption: change directory
#+begin_src bash -n  :dir /tmp/working-paper :results output replace code
cd data
#+end_src

#+name: Results: change directory
#+RESULTS: Results: change directory
#+begin_src bash -n
#+end_src

#+name: Results:
#+RESULTS: Results:

#+name: perhaps create an empty file as well
#+caption: perhaps create an empty file as well
#+begin_src bash -n  :dir /tmp/working-paper/data :results output replace code
touch some_data.txt
#+end_src

#+name: Results: perhaps create an empty file as well
#+RESULTS: Results: perhaps create an empty file as well
#+begin_src bash -n
#+end_src

#+name: Results:
#+RESULTS: Results:

#+name: now list the contents of the directory again
#+caption: now list the contents of the directory again
#+begin_src bash -n  :dir /tmp/working-paper/data :results output replace code
ls
#+end_src

#+name: Results: now list the contents of the directory again
#+RESULTS: Results: now list the contents of the directory again
#+begin_src bash -n
some_data.txt
#+end_src

#+name: Results:
#+RESULTS: Results:

#+name: now go back to the root directory
#+caption: now go back to the root directory
#+begin_src bash -n  :dir /tmp/working-paper/data :results output replace code
# .. means parent directory
cd ..
#+end_src

#+name: Results: now go back to the root directory
#+RESULTS: Results: now go back to the root directory
#+begin_src bash -n
#+end_src

#+name: Results:
#+RESULTS: Results:

** How git works conceptually
:PROPERTIES:
:ID:       2e22c322-ce97-48e4-80d4-446023d11aee
:END:
:LOGBOOK:
CLOCK: [2020-06-18 Thu 17:26]--[2020-06-18 Thu 17:38] =>  0:12
CLOCK: [2020-06-18 Thu 10:45]--[2020-06-18 Thu 10:47] =>  0:02
CLOCK: [2020-06-17 Wed 21:59]--[2020-06-17 Wed 22:43] =>  0:44
:END:

The changes we make to our files are meaningful to us (at least) at the moment they were made.
What git does is help you record that change together with the meaning it carries.

In the diagram below, we start from the lower right Desktop/Work area.
We are provided with existing files that can be changed, experimented with, or deleted.
We can also create new files if we want.
Everything in this area can ephemeral and git does not care about it.

Once we make some changes that we are happy with, we /stage/ those changes to the Staging area.
This area prepares those specific changes to be /committed/ to the history that git keeps.
We can /stage/ more changes to the Staging area from our Desktop, as long as we think they are related/coherent.

Once we think that the changes in the Staging area are ready to go into the history that git keeps, we simply /commit/ them.
During the commit process, we provide a /message/ that describes the meaning/purpose of the changes to be committed.
(hence linking the meaning to changes).
Then a new commit is made and recorded in the git history.
#+BEGIN_SRC ditaa :file git-tutorial-flowchart.png :cmdline -r -s 2
 /--\
 |c | This is a commit
 \--/


                      Time line
  ------------------------------------------------------------>
  Older changes                                       Newer changes

               Recorded history                                       Works yet to be recorded
  +-------------------------------------------------------+ +-----------------------------------------+
  |  Works in this area are not supposed to be reverted   | |Works in this area can be reverted easily|
  +-------------------------------------------------------+ +-----------------------------------------+
  |   Recorded history                         New commit | |    Work area                            |
  | +--------------------------------------+   +--------+ | | +--------------------------------------+|
  | |                                      |   |        | | | |          |                           ||
  | |                                      |   | New    | | | | Staging  |     Stash area            ||
  | |                                      |   | Commit | | | | area     |                           ||
  | |  /--\   /--\   /--\   /--\   /--\    |   | /--\   | | | |          |---------------------------||
  | |  |c |-->|c |-->|c |-->|c |-->|c |--------->|c |<--------|          |                           ||
  | |  \--/   \--/   \--/   \--/   \--/    |   | \--/   | | | |          |     Desktop/Work area/    ||
  | |                                      |   |        | | | |          |     Mess                  ||
  | |                                      |   |        | | | |          |                           ||
  | |                                      |   |        | | | |          |                           ||
  | +--------------------------------------+   +--------+ | | +--------------------------------------+|
  |                                                       | |                                         |
  |         git checkout                       git commit | |git add           git status             |
  |                                            git status | |git status        git stash              |
  |                                                       | |                                         |
  +-------------------------------------------------------+ +-----------------------------------------+
#+END_SRC

#+RESULTS:
[[file:git-tutorial-flowchart.png]]

** ~git init .~
:PROPERTIES:
:ID:       ee19226c-cbc3-4d8c-aa3f-b8dbea965d59
:END:
:LOGBOOK:
CLOCK: [2020-06-11 Thu 18:35]--[2020-06-11 Thu 18:37] =>  0:02
CLOCK: [2020-06-11 Thu 18:30]--[2020-06-11 Thu 18:34] =>  0:04
CLOCK: [2020-06-11 Thu 18:16]--[2020-06-11 Thu 18:26] =>  0:10
:END:
We have a project directory called ~working-paper~ and there is a ~data~ folder in it from [[*Prerequisites]].
#+name: show the initial documents
#+caption: show the initial documents
#+begin_src bash -n  :dir /tmp/working-paper :results output replace code
ls
#+end_src

#+name: Results: show the initial documents
#+RESULTS: Results: show the initial documents
#+begin_src bash -n
data
#+end_src

To start using git,
we init(ialize) the directory ~working-paper~.
This only needs to be done once per project.
#+name: git init(ialize)
#+caption: git init(ialize)
#+begin_src bash -n  :dir /tmp/working-paper :results output replace code
git init .
#+end_src

#+name: Results: git init(ialize)
#+RESULTS: Results: git init(ialize)
#+begin_src bash -n
Initialized empty Git repository in /tmp/working-paper/.git/
#+end_src

We can choose to set up a few details about us for the project.

If we don't do this, git will try its best to come up with the values from what it reads from your profile.

#+name: tell git something about us
#+caption: tell git something about us
#+begin_src bash -n  :dir /tmp/working-paper :results output replace code
git config user.name "Yi Wang"
git config user.email "wangy95@qut.edu.au"
#+end_src

#+name: Results: tell git something about us
#+RESULTS: Results: tell git something about us
#+begin_src bash -n
#+end_src

We then check if git knows who we are.
#+name: ask git who we are
#+caption: ask git who we are
#+begin_src bash -n  :dir /tmp/working-paper :results output replace code
git config user.name
git config user.email
#+end_src

#+name: Results: ask git who we are
#+RESULTS: Results: ask git who we are
#+begin_src bash -n
Yi Wang
wangy95@qut.edu.au
#+end_src

Congratulations! We now have set up the basics!
** ~git status~
:PROPERTIES:
:ID:       67d23768-88d9-47ac-b626-8f38025b9bfb
:END:
:LOGBOOK:
CLOCK: [2020-06-11 Thu 18:37]--[2020-06-11 Thu 18:58] =>  0:21
:END:

The second command we want to master is ~git status~.
As the name suggests, it reports /current status/ of the project.
#+name: using git status for the first time
#+caption: using git status for the first time
#+begin_src bash -n  :dir /tmp/working-paper :results output replace code
git status
#+end_src

#+name: Results: using git status for the first time
#+RESULTS: Results: using git status for the first time
#+begin_src bash -n
On branch master

No commits yet

Untracked files:
  (use "git add <file>..." to include in what will be committed)

	data/

nothing added to commit but untracked files present (use "git add" to track)
#+end_src

Here is a line-by-line explanation through the above feedback that ~git status~ gives you.
#+begin_src bash -n
# You can have any number of branches
# so git status lets you know which branch you are working on
On branch master

# Because this is a new project,
# we haven't committed anything.
# We will cover committing in the next section.
No commits yet

# Untracked means changes to these files are invisible to git,
# other than git knows that these files themselves exist
Untracked files:
  # Git is trying to prompt you that
  # you can use this command to track the file(s)
  (use "git add <file>..." to include in what will be committed)

  # The slash (/) means this is a directory.
  # Git only cares about directories that have files.
	data/

# A short summary of what our current status is
nothing added to commit but untracked files present (use "git add" to track)
#+end_src

I recommend that whenever you want to do ~git add~ and/or ~git commit~ from the following sections, you first run ~git status~ to get an idea of where you are at.
** ~git add file~
:PROPERTIES:
:ID:       743264e2-7dac-4899-8804-3cffd5a14198
:END:
:LOGBOOK:
CLOCK: [2020-06-11 Thu 19:08]--[2020-06-11 Thu 19:40] =>  0:32
:END:
We now have a data file in the directory ~data~
and it's time that we ask git to track (monitor) it for us.
#+name: git add for the first time
#+caption: git add for the first time
#+begin_src bash -n  :dir /tmp/working-paper :results output replace code
git add data/some_data.txt
#+end_src

#+name: Results: git add for the first time
#+RESULTS: Results: git add for the first time
#+begin_src bash -n
#+end_src
~git add~ does not give us any feedback so let's use ~git status~ to see what is our /status/ now.
#+name: git status after git add
#+caption: git status after git add
#+begin_src bash -n  :dir /tmp/working-paper :results output replace code
git status
#+end_src

#+name: Results: git status after git add
#+RESULTS: Results: git status after git add
#+begin_src bash -n
On branch master

No commits yet

Changes to be committed:
  (use "git rm --cached <file>..." to unstage)

	new file:   data/some_data.txt

#+end_src

The result seems similar to what we had [[Results: using git status for the first time][previously]], but certain words have changed, so here is another line-by-line explanation of what is going on.
#+begin_src bash -n
# We are still on branch master.
On branch master

# We still haven't made any commits yet.
No commits yet

# We have changes that can be committed.
Changes to be committed:
  # Git tells us that we can use this command
  # to un-add (unstage) the file.
  (use "git rm --cached <file>..." to unstage)

  # Git now sees the file and recognizes it as a new file. 
	new file:   data/some_data.txt

#+end_src

It is worth noting that, in our case, ~git add data/some_data.txt~ is the same as ~git add data/~ because git does not track empty directories by default and ~data~ only has one file ~some_data.txt~. 

We then need to create more files for our paper.
For starters, we want a file called ~my-great-paper.tex~ in the project root directory.
#+name: create main paper file
#+caption: create main paper file
#+begin_src bash -n  :dir /tmp/working-paper :results output replace code
touch my-great-paper.tex
#+end_src

#+name: Results: create main paper file
#+RESULTS: Results: create main paper file
#+begin_src bash -n
#+end_src

We again use ~git status~ to check what is going on.
#+name: git status after adding paper file
#+caption: git status after adding paper file
#+begin_src bash -n  :dir /tmp/working-paper :results output replace code
git status
#+end_src

#+name: Results: git status after adding paper file
#+RESULTS: Results: git status after adding paper file
#+begin_src bash -n
On branch master

No commits yet

Changes to be committed:
  (use "git rm --cached <file>..." to unstage)

	new file:   data/some_data.txt

Untracked files:
  (use "git add <file>..." to include in what will be committed)

	my-great-paper.tex

#+end_src
The above result is kind of what we could understand.
We have added a new file called /my-great-paper.tex/ and it's not tracked by git yet.

We now add (stage) it to git.
#+name: add main paper file to git
#+caption: add main paper file to git
#+begin_src bash -n  :dir /tmp/working-paper :results output replace code
git add my-great-paper.tex
#+end_src

#+name: Results: add main paper file to git
#+RESULTS: Results: add main paper file to git
#+begin_src bash -n
#+end_src

Again, we use ~git status~ to check our status.
#+name: git status after staging main paper file
#+caption: git status after staging main paper file
#+begin_src bash -n  :dir /tmp/working-paper :results output replace code
git status
#+end_src

#+name: Results: git status after staging main paper file
#+RESULTS: Results: git status after staging main paper file
#+begin_src bash -n
On branch master

No commits yet

Changes to be committed:
  (use "git rm --cached <file>..." to unstage)

	new file:   data/some_data.txt
	new file:   my-great-paper.tex

#+end_src
We now have two files /staged/ using ~git add~.

There is certainly more to the project than we have at the moment, so I'm going to add two more files. One called ~references.bib~ for all our references and another called ~meeting-minutes.txt~ that might record some useful information.
#+name: add two more files
#+caption: add two more files
#+begin_src bash -n  :dir /tmp/working-paper :results output replace code
touch references.bib
touch meeting-minutes.txt
#+end_src

#+RESULTS: Results: add two more files
#+begin_src bash -n
#+end_src

And we *always* rely on ~git status~.
#+name: git status after adding two more files
#+caption: git status after adding two more files
#+begin_src bash -n  :dir /tmp/working-paper :results output replace code
git status
#+end_src

#+name: Results: git status after adding two more files
#+RESULTS: Results: git status after adding two more files
#+begin_src bash -n
On branch master

No commits yet

Changes to be committed:
  (use "git rm --cached <file>..." to unstage)

	new file:   data/some_data.txt
	new file:   my-great-paper.tex

Untracked files:
  (use "git add <file>..." to include in what will be committed)

	meeting-minutes.txt
	references.bib

#+end_src
We add (stage) these two files together by listing them after the
~git add~ command (of course you can have more than two files to add/stage).
#+name: git add two files together
#+caption: git add two files together
#+begin_src bash -n  :dir /tmp/working-paper :results output replace code
git add meeting-minutes.txt references.bib
#+end_src

#+name: Results: git add two files together
#+RESULTS: Results: git add two files together
#+begin_src bash -n
#+end_src

~git status~
#+name: git status after staging the two new files
#+caption: git status after staging the two new files
#+begin_src bash -n  :dir /tmp/working-paper :results output replace code
git status
#+end_src

#+name: Results: git status after staging the two new files
#+RESULTS: Results: git status after staging the two new files
#+begin_src bash -n
On branch master

No commits yet

Changes to be committed:
  (use "git rm --cached <file>..." to unstage)

	new file:   data/some_data.txt
	new file:   meeting-minutes.txt
	new file:   my-great-paper.tex
	new file:   references.bib

#+end_src

One last thing about ~git add~ is that you can do all of the above 
in one command *when you are sure that they should be grouped together as one coherent change*.

To demonstrate this functionality, we again create some files for our project.
#+name: add some more files for the project
#+caption: add some more files for the project
#+begin_src bash -n  :dir /tmp/working-paper :results output replace code
mkdir misc
cd misc
touch contact-numbers.csv
touch experiment-expenditures.csv
#+end_src

~git status~ again.
#+name: git status after misc files
#+caption: git status after misc files
#+begin_src bash -n  :dir /tmp/working-paper :results output replace code
git status
#+end_src

#+name: Results: git status after misc files
#+RESULTS: Results: git status after misc files
#+begin_src bash -n
On branch master

No commits yet

Changes to be committed:
  (use "git rm --cached <file>..." to unstage)

	new file:   data/some_data.txt
	new file:   meeting-minutes.txt
	new file:   my-great-paper.tex
	new file:   references.bib

Untracked files:
  (use "git add <file>..." to include in what will be committed)

	misc/

#+end_src

We can now use ~git add .~ to stage/add these newly created files all together.

#+name: git add .
#+caption: git add .
#+begin_src bash -n  :dir /tmp/working-paper :results output replace code
git add .
#+end_src

#+name: Results: git add .
#+RESULTS: Results: git add .
#+begin_src bash -n
#+end_src

~git status~ again.
#+name: git status after staging misc files
#+caption: git status after staging misc files
#+begin_src bash -n  :dir /tmp/working-paper :results output replace code
git status
#+end_src

#+name: Results: git status after staging misc files
#+RESULTS: Results: git status after staging misc files
#+begin_src bash -n
On branch master

No commits yet

Changes to be committed:
  (use "git rm --cached <file>..." to unstage)

	new file:   data/some_data.txt
	new file:   meeting-minutes.txt
	new file:   misc/contact-numbers.csv
	new file:   misc/experiment-expenditures.csv
	new file:   my-great-paper.tex
	new file:   references.bib

#+end_src

We are finally ready to conduct our first commit!
** ~git commit -m "Commit message"~
:PROPERTIES:
:ID:       06f2cf8b-5182-44e2-8de4-11447ce1c77a
:END:
:LOGBOOK:
CLOCK: [2020-06-11 Thu 20:08]--[2020-06-11 Thu 20:12] =>  0:04
CLOCK: [2020-06-11 Thu 19:47]--[2020-06-11 Thu 20:07] =>  0:20
:END:
We can now finally /commit/ our changes, which means that these changes will be written in your history book and no one can fake it.

To do this, we use ~git commit~.
The following example uses ~git commit -m "message"~.
In case you haven't figured it out already, ~-m~ stands for /message/.
This /message/ you provide is the message that helps you from a year later to understand why you did what you did.

If you feel like you need to do a lot of explaining, we will cover how to provide a long message [[FAQs][later]].
For now, we just provide a short message for the start of our project.
#+name: our first commit!
#+caption: our first commit!
#+begin_src bash -n  :dir /tmp/working-paper :results output replace code
git commit -m "The starting point of our new paper!"
#+end_src

#+name: Results: our first commit!
#+RESULTS: Results: our first commit!
#+begin_src bash -n
[master (root-commit) 0c9b8bd] The starting point of our new paper!
 6 files changed, 0 insertions(+), 0 deletions(-)
 create mode 100644 data/some_data.txt
 create mode 100644 meeting-minutes.txt
 create mode 100644 misc/contact-numbers.csv
 create mode 100644 misc/experiment-expenditures.csv
 create mode 100644 my-great-paper.tex
 create mode 100644 references.bib
#+end_src
Now we've written a lot of stuff in the history book *at once* and this history is reflected by this value ~0c9b8bd~.

There is no need to remember/know this value whatsoever because we can always find it. To do that and to read the history book we just wrote, we need to take a little detour to another command called ~git log~.

~git log~, as its name suggests, reports a log of what we did in the past.
The output is a list of /commits/ that we made.
#+name: git log for the first time
#+caption: git log for the first time
#+begin_src bash -n  :dir /tmp/working-paper :results output replace code
git log
#+end_src

#+name: Results: git log for the first time
#+RESULTS: Results: git log for the first time
#+begin_src bash -n
commit 0c9b8bd37772d407642b8f84b747e8f45072cbb3
Author: Yi Wang <wangy95@qut.edu.au>
Date:   Thu Jun 11 19:52:12 2020 +1000

    The starting point of our new paper!
#+end_src
In the above results, we see the familiar value ~0c9b8bd~ as the starting characters of the line ~commit 0c9b8bd37772d407642b8f84b747e8f45072cbb3~. This means that this commit is identifiable by this strange.
The ~Author~ line shows the information we gave git in [[*Prerequisites]], followed by a date stamp. Finally, it comes with the commit message that we gave it earlier.

There is a lot to the ~git log~ command (as well as other commands), but here I provide some variations of it to help you get started fast.

Only show one line per commit.
#+name: git log oneline
#+caption: git log oneline
#+begin_src bash -n  :dir /tmp/working-paper :results output replace code
git log --oneline
#+end_src

#+name: Results: git log oneline
#+RESULTS: Results: git log oneline
#+begin_src bash -n
0c9b8bd The starting point of our new paper!
#+end_src

Get some colors if your command line doesn't do it already.
(Unfortunately this result can not be seen here).
#+name: git log color
#+caption: git log color
#+begin_src bash -n  :dir /tmp/working-paper :results output replace code
git log --color
#+end_src

#+name: Results: git log color
#+RESULTS: Results: git log color
#+begin_src bash -n
commit 0c9b8bd37772d407642b8f84b747e8f45072cbb3
Author: Yi Wang <wangy95@qut.edu.au>
Date:   Thu Jun 11 19:52:12 2020 +1000

    The starting point of our new paper!
#+end_src

Of course you can combine them.
#+name: git log oneline color
#+caption: git log oneline color
#+begin_src bash -n  :dir /tmp/working-paper :results output replace code
git log --oneline --color
#+end_src

#+name: Results: git log oneline color
#+RESULTS: Results: git log oneline color
#+begin_src bash -n
33m0c9b8bd The starting point of our new paper!
#+end_src
** Putting it together
:PROPERTIES:
:ID:       32bbf24b-04b7-42b5-bb42-42fdef2d5c1a
:END:
:LOGBOOK:
CLOCK: [2020-06-11 Thu 20:36]--[2020-06-11 Thu 21:05] =>  0:29
:END:
We now demonstrate how ~git status~, ~git add~ and ~git commit~ work together in a basic workflow.

Starting off, we run ~git status~ to make sure that there is no changes from previous work that we haven't dealt with.
#+name: workflow git status pre-check
#+caption: workflow git status pre-check
#+begin_src bash -n  :dir /tmp/working-paper :results output replace code
git status
#+end_src

#+name: Results: workflow git status pre-check
#+RESULTS: Results: workflow git status pre-check
#+begin_src bash -n
On branch master
nothing to commit, working tree clean
#+end_src

Then we make some changes to our files.
I'm going to write something to ~my-great-paper.tex~ file.
#+name: workflow write to file
#+caption: workflow write to file
#+begin_src bash -n  :dir /tmp/working-paper :results output replace code
echo "% This is my first paper written with the help of git\n%And I hope it all works out.\n" > my-great-paper.tex
#+end_src

#+name: Results: workflow write to file
#+RESULTS: Results: workflow write to file
#+begin_src bash -n
#+end_src

Let's see if the change was successful by ~git status~.
#+name: workflow git status check if write is successful
#+caption: workflow git status check if write is successful
#+begin_src bash -n  :dir /tmp/working-paper :results output replace code
git status
#+end_src

#+name: Results: workflow git status check if write is successful
#+RESULTS: Results: workflow git status check if write is successful
#+begin_src bash -n
On branch master
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

	modified:   my-great-paper.tex

no changes added to commit (use "git add" and/or "git commit -a")
#+end_src

Optionally, we can use ~git diff~ to see what has been changed.
#+name: workflow git diff
#+caption: workflow git diff
#+begin_src bash -n  :dir /tmp/working-paper :results output replace code
git diff my-great-paper.tex
#+end_src

#+name: Results: workflow git diff
#+RESULTS: Results: workflow git diff
#+begin_src bash -n
diff --git a/my-great-paper.tex b/my-great-paper.tex
index e69de29..a73bcc6 100644
--- a/my-great-paper.tex
+++ b/my-great-paper.tex
@@ -0,0 +1 @@
+% This is my first paper written with the help of git\n%And I hope it all works out.
#+end_src
Here's some explanation of what happened.
#+begin_src bash -n
# Git is comparing what you just did
# to what the last commit had for the file
# my-great-paper.tex.
diff --git a/my-great-paper.tex b/my-great-paper.tex
index e69de29..a73bcc6 100644
--- a/my-great-paper.tex
+++ b/my-great-paper.tex
@@ -0,0 +1 @@
# + means this is added.
+% This is my first paper written with the help of git\n%And I hope it all works out.
#+end_src

We are sure that this change is what we need so we stage it.
#+name: workflow git add to stage 1
#+caption: workflow git add to stage 1
#+begin_src bash -n  :dir /tmp/working-paper :results output replace code
git add .
#+end_src

#+name: Results: workflow git add to stage 1
#+RESULTS: Results: workflow git add to stage 1
#+begin_src bash -n
#+end_src
#+name: workflow git status 3
#+caption: workflow git status 3
#+begin_src bash -n  :dir /tmp/working-paper :results output replace code
git status
#+end_src

#+name: Results: workflow git status 3
#+RESULTS: Results: workflow git status 3
#+begin_src bash -n
On branch master
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

	modified:   my-great-paper.tex

#+end_src
In the above results, git knows we changed our /existing/ file ~my-great-paper.tex~ so it shows that it's /modified/. Here, /existing/ means it's tracked by git.

We are happy to commit this staged change.
#+name: workflow git commit 1
#+caption: workflow git commit 1
#+begin_src bash -n  :dir /tmp/working-paper :results output replace code
git commit -m "Add comments in the paper to celebrate first use of git"
#+end_src

#+name: Results: workflow git commit 1
#+RESULTS: Results: workflow git commit 1
#+begin_src bash -n
[master 58bbd26] Add comments in the paper to celebrate first use of git
 1 file changed, 1 insertion(+)
#+end_src

We repeat this to add template from QUT to the file.
#+name: add more contents to the main file
#+caption: add more contents to the main file
#+begin_src bash -n  :dir /tmp/working-paper :results output replace code
cat /mnt/c/Users/thoma/Dev/orgs/brain/Work/ThesisMainFile.tex >> my-great-paper.tex
#+end_src

#+name: Results: add more contents to the main file
#+RESULTS: Results: add more contents to the main file
#+begin_src bash -n
#+end_src

Routine check.
#+name: workflow git status 4
#+caption: workflow git status 4
#+begin_src bash -n  :dir /tmp/working-paper :results output replace code
git status
#+end_src

#+name: Results: workflow git status 4
#+RESULTS: Results: workflow git status 4
#+begin_src bash -n
On branch master
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

	modified:   my-great-paper.tex

no changes added to commit (use "git add" and/or "git commit -a")
#+end_src

Running ~git diff~ now would output a lot of text, so I'm truncating it down a bit to 15 lines just to fit this tutorial. Your command line can display the output fine.
#+name: git diff truncated
#+caption: git diff truncated
#+begin_src bash -n  :dir /tmp/working-paper :results output replace code
git diff | head -n 15
#+end_src

#+name: Results: git diff truncated
#+RESULTS: Results: git diff truncated
#+begin_src bash -n
diff --git a/my-great-paper.tex b/my-great-paper.tex
index a73bcc6..503f2f7 100644
--- a/my-great-paper.tex
+++ b/my-great-paper.tex
@@ -1 +1,55 @@
 % This is my first paper written with the help of git\n%And I hope it all works out.
+\documentclass[12pt,twoside,a4paper,openright]{report}
+\usepackage{qutthesis}
+\usepackage{amsmath}
+\usepackage{amssymb}
+%\usepackage{amsart}
+\usepackage{verbatim}
+%\usepackage{nomencl}
+\usepackage{longtable}
+\usepackage{hyperref}
#+end_src
You can see that a lot of contents have been added.

It is worth mentioning that the amount of the contents does not determine when you should stage and commit. Instead, you need to stage and commit when you finish a coherent part.

For example, all I did in the this change was /adding template text/, which I think is a coherent part no matter how many lines it has.

This way of thinking actually helps you to organize your writing/work better because it forces you to divide your work into small chunks that are easier to tackle.

After saying all that, we can now simply ~git add~ and ~git commit~.
#+name: git add template
#+caption: git add template
#+begin_src bash -n  :dir /tmp/working-paper :results output replace code
git add .
#+end_src

#+name: Results: git add template
#+RESULTS: Results: git add template
#+begin_src bash -n
#+end_src

#+name: git commit template
#+caption: git commit template
#+begin_src bash -n  :dir /tmp/working-paper :results output replace code
git commit -m "Add template text from QUT"
#+end_src

#+name: Results: git commit template
#+RESULTS: Results: git commit template
#+begin_src bash -n
[master af3e0ec] Add template text from QUT
 1 file changed, 54 insertions(+)
#+end_src

And now if we check our log.
#+name: git log check more commits
#+caption: git log check more commits
#+begin_src bash -n  :dir /tmp/working-paper :results output replace code
git log
#+end_src

#+name: Results: git log check more commits
#+RESULTS: Results: git log check more commits
#+begin_src bash -n
commit af3e0ec5d969d3fe3bab819678512fefdbf49bc0
Author: Yi Wang <wangy95@qut.edu.au>
Date:   Thu Jun 11 21:05:28 2020 +1000

    Add template text from QUT

commit 58bbd2665b24a617452cbdc9ec8c7e307d961c71
Author: Yi Wang <wangy95@qut.edu.au>
Date:   Thu Jun 11 20:49:58 2020 +1000

    Add comments in the paper to celebrate first use of git

commit 0c9b8bd37772d407642b8f84b747e8f45072cbb3
Author: Yi Wang <wangy95@qut.edu.au>
Date:   Thu Jun 11 19:52:12 2020 +1000

    The starting point of our new paper!
#+end_src
** Going back in history
:PROPERTIES:
:ID:       2dad402e-640e-48bd-9216-2f5c4d9f99c0
:END:
:LOGBOOK:
CLOCK: [2020-06-11 Thu 22:01]--[2020-06-11 Thu 22:04] =>  0:03
CLOCK: [2020-06-11 Thu 21:29]--[2020-06-11 Thu 21:54] =>  0:25
:END:
Our project now has 3 commits, wow!

Now I'll copy the rest of the template to the current folder to make it easier for us to work with.
#+name: copy all template files
#+caption: copy all template files
#+begin_src bash -n  :dir /tmp/working-paper :results output replace code
cp -r /mnt/c/Users/thoma/Dev/orgs/brain/Work/QUTThesisTemplate .
#+end_src

#+name: Results: copy all template files
#+RESULTS: Results: copy all template files
#+begin_src bash -n
#+end_src

#+name: git status to check for all template files
#+caption: git status to check for all template files
#+begin_src bash -n  :dir /tmp/working-paper :results output replace code
git status
#+end_src

#+name: Results: git status to check for all template files
#+RESULTS: Results: git status to check for all template files
#+begin_src bash -n
On branch master
Untracked files:
  (use "git add <file>..." to include in what will be committed)

	QUTThesisTemplate/

nothing added to commit but untracked files present (use "git add" to track)
#+end_src
#+name: git add new template files
#+caption: git add new template files
#+begin_src bash -n  :dir /tmp/working-paper :results output replace code
git add QUTThesisTemplate
#+end_src

#+name: Results: git add new template files
#+RESULTS: Results: git add new template files
#+begin_src bash -n
#+end_src

#+name: git status after staging new template files
#+caption: git status after staging new template files
#+begin_src bash -n  :dir /tmp/working-paper :results output replace code
git status
#+end_src

#+name: Results: git status after staging new template files
#+RESULTS: Results: git status after staging new template files
#+begin_src bash -n
On branch master
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

	new file:   QUTThesisTemplate/Appendix.tex
	new file:   QUTThesisTemplate/Ch0FrontPart.tex
	new file:   QUTThesisTemplate/Ch1Introduction.tex
	new file:   QUTThesisTemplate/Ch2LiteratureReview.tex
	new file:   QUTThesisTemplate/Ch3.tex
	new file:   QUTThesisTemplate/Ch4.tex
	new file:   QUTThesisTemplate/Ch5.tex
	new file:   QUTThesisTemplate/Ch6Conclusions.tex
	new file:   QUTThesisTemplate/DelayS.eps
	new file:   QUTThesisTemplate/DelayS.png
	new file:   QUTThesisTemplate/QUTLogo.eps
	new file:   QUTThesisTemplate/QUTLogo.png
	new file:   QUTThesisTemplate/References.bib
	new file:   QUTThesisTemplate/ThesisMainFile.pdf
	new file:   QUTThesisTemplate/ThesisMainFile.tex
	new file:   QUTThesisTemplate/nomenclature.tex
	new file:   QUTThesisTemplate/qutthesis.sty

#+end_src
Commit all template files.
#+name: git commit new template files
#+caption: git commit new template files
#+begin_src bash -n  :dir /tmp/working-paper :results output replace code
git commit -m "Add all template files"
#+end_src

#+name: Results: git commit new template files
#+RESULTS: Results: git commit new template files
#+begin_src bash -n
[master 5980162] Add all template files
 17 files changed, 4671 insertions(+)
 create mode 100755 QUTThesisTemplate/Appendix.tex
 create mode 100755 QUTThesisTemplate/Ch0FrontPart.tex
 create mode 100755 QUTThesisTemplate/Ch1Introduction.tex
 create mode 100755 QUTThesisTemplate/Ch2LiteratureReview.tex
 create mode 100755 QUTThesisTemplate/Ch3.tex
 create mode 100755 QUTThesisTemplate/Ch4.tex
 create mode 100755 QUTThesisTemplate/Ch5.tex
 create mode 100755 QUTThesisTemplate/Ch6Conclusions.tex
 create mode 100755 QUTThesisTemplate/DelayS.eps
 create mode 100755 QUTThesisTemplate/DelayS.png
 create mode 100755 QUTThesisTemplate/QUTLogo.eps
 create mode 100755 QUTThesisTemplate/QUTLogo.png
 create mode 100755 QUTThesisTemplate/References.bib
 create mode 100755 QUTThesisTemplate/ThesisMainFile.pdf
 create mode 100755 QUTThesisTemplate/ThesisMainFile.tex
 create mode 100755 QUTThesisTemplate/nomenclature.tex
 create mode 100755 QUTThesisTemplate/qutthesis.sty
#+end_src

Modify ~my-great-paper.tex~ so it can properly reference the separate files in ~QUTThesisTemplate~ directory.

After the modification, run ~git status~.
#+name: git status after modification
#+caption: git status after modification
#+begin_src bash -n  :dir /tmp/working-paper :results output replace code
git status
#+end_src

#+name: Results: git status after modification
#+RESULTS: Results: git status after modification
#+begin_src bash -n
On branch master
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

	modified:   my-great-paper.tex

no changes added to commit (use "git add" and/or "git commit -a")
#+end_src

Optionally run ~git diff~ to see what's changed.
#+name: git diff optionl
#+caption: git diff optionl
#+begin_src bash -n  :dir /tmp/working-paper :results output replace code
git diff
#+end_src

#+name: Results: git diff optionl
#+RESULTS: Results: git diff optionl
#+begin_src bash -n
diff --git a/my-great-paper.tex b/my-great-paper.tex
index 503f2f7..efe322e 100644
--- a/my-great-paper.tex
+++ b/my-great-paper.tex
@@ -21,20 +21,20 @@
 \begin{document}
 
 %%%%%%%%%% Front Part: Cover page, abstract, ack, preface
-\include{./Ch0FrontPart}           %Ch0FrontPart.tex
+\include{./QUTThesisTemplate/Ch0FrontPart}           %Ch0FrontPart.tex
                                    %   including title page information, abstract,
                                    %   acknowledgement, etc
 %%% Body Text
-\include{./Ch1Introduction}        %Ch1Introduction.tex
-\include{./Ch2LiteratureReview}    %Ch2LiteratureReview.tex
-\include{./Ch3}                    %Ch3.tex
-\include{./Ch4}                    %Ch4.tex
-\include{./Ch5}                    %Ch5.tex
-\include{./Ch6Conclusions}         %Ch6Conclusions.tex
+\include{./QUTThesisTemplate/Ch1Introduction}        %Ch1Introduction.tex
+\include{./QUTThesisTemplate/Ch2LiteratureReview}    %Ch2LiteratureReview.tex
+\include{./QUTThesisTemplate/Ch3}                    %Ch3.tex
+\include{./QUTThesisTemplate/Ch4}                    %Ch4.tex
+\include{./QUTThesisTemplate/Ch5}                    %Ch5.tex
+\include{./QUTThesisTemplate/Ch6Conclusions}         %Ch6Conclusions.tex
 
 %%%%%%%%%%%Appendix
 % If you don't have any appendix, comment the following line out
-\include{./Appendix}
+\include{./QUTThesisTemplate/Appendix}
 
 %%%%%%%%%%%%References
 % The default heading for references is ``Literature Cited''
@@ -52,4 +52,5 @@
 \newpage
 ~~
 \cleardoublepage
-\end{document}
\ No newline at end of file
+\end{document}
+
#+end_src

We now use ~git add~ and ~git commit~ to stage and commit the changes.
I'm going to use them together in this example.
#+name: git add and git commit together
#+caption: git add and git commit together
#+begin_src bash -n  :dir /tmp/working-paper :results output replace code
git add .
git commit -m "Properly reference other files in the main tex file"
#+end_src

#+name: Results: git add and git commit together
#+RESULTS: Results: git add and git commit together
#+begin_src bash -n
[master 1c439a9] Properly reference other files in the main tex file
 1 file changed, 10 insertions(+), 9 deletions(-)
#+end_src
Git considers changes in terms of lines, so changing
~\include{./Appendix}~
to ~\include{./QUTThesisTemplate/Appendix}~, even on the same line, is considered first deleting the original line, and then insert the new line.

We now have some more history to go back to.
#+name: git log more history
#+caption: git log more history
#+begin_src bash -n  :dir /tmp/working-paper :results output replace code
git log --oneline
#+end_src

#+name: Results: git log more history
#+RESULTS: Results: git log more history
#+begin_src bash -n
1c439a9 Properly reference other files in the main tex file
5980162 Add all template files
af3e0ec Add template text from QUT
58bbd26 Add comments in the paper to celebrate first use of git
0c9b8bd The starting point of our new paper!
#+end_src
To go back to a previous version (history), simply use ~git checkout~.
For example, we want to go back to ~af3e0ec Add template text from QUT~.
#+name: git checkout for the first time!
#+caption: git checkout for the first time!
#+begin_src bash -n  :dir /tmp/working-paper :results output replace code
git checkout af3e0ec
#+end_src

#+name: Results: git checkout for the first time!
#+RESULTS: Results: git checkout for the first time!
#+begin_src bash -n
#+end_src
Then we run ~git log~ again.
We can see that we are at commit ~af3e0ec~ (this commit is at the top of the result from ~git log~).
#+name: git log after going back to commit
#+caption: git log after going back to commit
#+begin_src bash -n  :dir /tmp/working-paper :results output replace code
git log --oneline
#+end_src

#+name: Results: git log after going back to commit
#+RESULTS: Results: git log after going back to commit
#+begin_src bash -n
af3e0ec Add template text from QUT
58bbd26 Add comments in the paper to celebrate first use of git
0c9b8bd The starting point of our new paper!
#+end_src
To prove that, we can check our current working directory.
#+name: check current working directory
#+caption: check current working directory
#+begin_src bash -n  :dir /tmp/working-paper :results output replace code
ls
#+end_src

#+name: Results: check current working directory
#+RESULTS: Results: check current working directory
#+begin_src bash -n
data
meeting-minutes.txt
misc
my-great-paper.tex
references.bib
test
#+end_src
We can see that the ~QUTThesisTemplate~ directory is gone!
We have successfully made it back in time!
** ~git blame~
:PROPERTIES:
:ID:       07509132-7bb2-44c0-8491-d7b01cf3669f
:END:
:LOGBOOK:
CLOCK: [2020-06-11 Thu 16:46]--[2020-06-11 Thu 16:51] =>  0:05
:END:
Suppose someone edited our great paper...
#+name: someone edits this great paper
#+caption: someone edits this great paper
#+begin_src bash -n  :dir /tmp/working-paper :results output replace code
echo "Catch me if you can" >> my-great-paper.tex
#+end_src

#+RESULTS: Results: someone edits this great paper
#+name: Results: someone edits this great paper
#+begin_src bash -n
#+end_src

And then the changes are staged (added) and commited.
#+name: add and commit
#+caption: add and commit
#+begin_src bash -n  :dir /tmp/working-paper :results output replace drawer
git add .
git commit -m "Explain why we need git"
#+end_src

#+RESULTS: Results: add and commit
#+name: Results: add and commit
#+begin_src bash -n
[master 7f3f739] Explain why we need git
1 file changed, 1 insertion(+)
#+end_src

#+begin_src bash -n  :dir /tmp/working-paper :results output replace code
git blame my-great-paper.tex
#+end_src

#+RESULTS: Results:
#+name: Results:
#+begin_src bash -n
7f3f739b (Yi Wang 2020-06-11 16:51:08 +1000 1) Catch me if you can
#+end_src


** ~git push origin master~
:PROPERTIES:
:ID:       d8ef5cd5-4d8e-4fe0-af3f-4198b7e32767
:END:
:LOGBOOK:
CLOCK: [2020-06-11 Thu 09:31]--[2020-06-11 Thu 09:31] =>  0:00
:END:
** ~git pull origin master~
:PROPERTIES:
:ID:       040e0a2c-cee3-48e0-8517-64acbbf485b8
:END:
** FAQs
:PROPERTIES:
:ID:       b86fca28-d774-48f8-8c5f-dc558ab5a3a2
:END:
** Academic project demo
:LOGBOOK:
CLOCK: [2020-06-23 Tue 15:18]--[2020-06-23 Tue 16:14] =>  0:56
CLOCK: [2020-06-23 Tue 15:16]--[2020-06-23 Tue 15:17] =>  0:01
:END:
One random meme that catches the pain:
[[file:version control meme.png]]

#+name: set up environment
#+caption: set up environment
#+begin_src bash :dir /tmp :results output replace code
mkdir contest-project
#+end_src

#+name: Results: set up environment
#+RESULTS: Results: set up environment
#+begin_src bash
#+end_src

Add files.
#+name: add files
#+caption: add files
#+begin_src bash :dir /tmp/contest-project :results output replace code
touch main-paper.tex
mkdir ./data
touch ./data/main-data.csv
#+end_src

#+name: Results: add files
#+RESULTS: Results: add files
#+begin_src bash
#+end_src

Initialize.
#+name: init
#+caption: init
#+begin_src bash :dir /tmp/contest-project :results output replace code
git init .
#+end_src

#+name: Results: init
#+RESULTS: Results: init
#+begin_src bash
Initialized empty Git repository in /tmp/contest-project/.git/
#+end_src

Add all.
#+name: add all existing files
#+caption: add all existing files
#+begin_src bash :dir /tmp/contest-project :results output replace code
git add .
#+end_src

#+name: Results: add all existing files
#+RESULTS: Results: add all existing files
#+begin_src bash
#+end_src
Commit.
#+name: commit main paper
#+caption: commit main paper
#+begin_src bash :dir /tmp/contest-project :results output replace code
git commit -am "Add main paper and main-data file."
#+end_src

#+name: Results: commit main paper
#+RESULTS: Results: commit main paper
#+begin_src bash
[master (root-commit) ed1e777] Add main paper and main-data file.
 2 files changed, 0 insertions(+), 0 deletions(-)
 create mode 100644 data/main-data.csv
 create mode 100644 main-paper.tex
#+end_src
Add more content.
#+name: add more content
#+caption: add more content
#+begin_src bash :dir /tmp/contest-project :results output replace code
cat /mnt/c/Users/thoma/Dev/orgs/brain/Work/ThesisMainFile.tex >> main-paper.tex
#+end_src

#+name: Results: add more content
#+RESULTS: Results: add more content
#+begin_src bash
#+end_src

Stage new content.
#+name: stage new content
#+caption: stage new content
#+begin_src bash :dir /tmp/contest-project :results output replace code
git add .
#+end_src

#+name: Results: stage new content
#+RESULTS: Results: stage new content
#+begin_src bash
#+end_src

Commit new content.
#+name: commit new content
#+caption: commit new content
#+begin_src bash :dir /tmp/contest-project :results output replace code
git commit -m "Basic template for the main paper."
#+end_src

#+name: Results: commit new content
#+RESULTS: Results: commit new content
#+begin_src bash
[master 508081a] Basic template for the main paper.
 1 file changed, 54 insertions(+)
#+end_src

Add a branch for conference in Sydney.
#+name: new branch for conference
#+caption: new branch for conference
#+begin_src bash :dir /tmp/contest-project :results output replace code
git branch syd-conference
#+end_src

#+name: Results: new branch for conference
#+RESULTS: Results: new branch for conference
#+begin_src bash
#+end_src

Check the branch.
#+name: check the branch
#+caption: check the branch
#+begin_src bash :dir /tmp/contest-project :results output replace code
git branch
#+end_src

#+name: Results: check the branch
#+RESULTS: Results: check the branch
#+begin_src bash
,* master
  syd-conference
#+end_src
Checkout the branch.
#+name: checkout the sydney branch
#+caption: checkout the sydney branch
#+begin_src bash :dir /tmp/contest-project :results output replace code
git checkout syd-conference
#+end_src

#+name: Results: checkout the sydney branch
#+RESULTS: Results: checkout the sydney branch
#+begin_src bash
#+end_src
Add new files for the conference.
#+name: add new files for syd conference
#+caption: add new files for syd conference
#+begin_src bash :dir /tmp/contest-project :results output replace code
mkdir ./syd-conference
touch ./syd-conference/presentation.tex
#+end_src

#+name: Results: add new files for syd conference
#+RESULTS: Results: add new files for syd conference
#+begin_src bash
#+end_src
We manually added some content to the presentation.tex file.
Now we stage it.
#+name: stage new presentation file
#+caption: stage new presentation file
#+begin_src bash :dir /tmp/contest-project :results output replace code
git add .
#+end_src

#+name: Results: stage new presentation file
#+RESULTS: Results: stage new presentation file
#+begin_src bash
#+end_src
Now we commit it.
#+name: commit presentation content
#+caption: commit presentation content
#+begin_src bash :dir /tmp/contest-project :results output replace code
git commit -m "Add content for sydney conference"
#+end_src

#+name: Results: commit presentation content
#+RESULTS: Results: commit presentation content
#+begin_src bash
[syd-conference a3df94b] Add content for sydney conference
 1 file changed, 448 insertions(+)
 create mode 100644 syd-conference/presentation.tex
#+end_src

#+name: check status
#+caption: check status
#+begin_src bash :dir /tmp/contest-project :results output replace code
git status
#+end_src

#+name: Results: check status
#+RESULTS: Results: check status
#+begin_src bash
On branch syd-conference
nothing to commit, working tree clean
#+end_src

We check our log.
#+name: check log
#+caption: check log
#+begin_src bash :dir /tmp/contest-project :results output replace code
git log
#+end_src

#+name: Results: check log
#+RESULTS: Results: check log
#+begin_src bash
commit a3df94b94279d7b14df06787d414c505ce6396ed
Author: Yaoni <wyatsky@gmail.com>
Date:   Tue Jun 23 15:48:10 2020 +1000

    Add content for sydney conference

commit 508081abcde3a7444d258f7fd3c7d5bcbd165080
Author: Yaoni <wyatsky@gmail.com>
Date:   Tue Jun 23 15:34:13 2020 +1000

    Basic template for the main paper.

commit ed1e777e7c5109b12e20dac0b4c59728a4ffea60
Author: Yaoni <wyatsky@gmail.com>
Date:   Tue Jun 23 15:25:26 2020 +1000

    Add main paper and main-data file.
#+end_src

Assume that we have temporarily finished our work on the conference paper.
Now we go back to our main paper branch (master) to continue our work.
#+name: go back to master branch
#+caption: go back to master branch
#+begin_src bash :dir /tmp/contest-project :results output replace code
git checkout master
git log
#+end_src

#+name: Results: go back to master branch
#+RESULTS: Results: go back to master branch
#+begin_src bash
commit 508081abcde3a7444d258f7fd3c7d5bcbd165080
Author: Yaoni <wyatsky@gmail.com>
Date:   Tue Jun 23 15:34:13 2020 +1000

    Basic template for the main paper.

commit ed1e777e7c5109b12e20dac0b4c59728a4ffea60
Author: Yaoni <wyatsky@gmail.com>
Date:   Tue Jun 23 15:25:26 2020 +1000

    Add main paper and main-data file.
#+end_src

There's no trace of our conference files.
#+name: check conference files
#+caption: check conference files
#+begin_src bash :dir /tmp/contest-project :results output replace code
ls
#+end_src

#+name: Results: check conference files
#+RESULTS: Results: check conference files
#+begin_src bash
data
main-paper.tex
#+end_src

We then want to work on some changes that are experimental.
For example, we might want to add some stata code to play with our data.
We can create a new branch to do so.
#+name: experimental changes
#+caption: experimental changes
#+begin_src bash :dir /tmp/contest-project :results output replace code
git branch experiment
git checkout experiment
#+end_src

#+name: Results: experimental changes
#+RESULTS: Results: experimental changes
#+begin_src bash
#+end_src

We then create some do files.
#+name: create do files
#+caption: create do files
#+begin_src bash :dir /tmp/contest-project :results output replace code
touch data-analysis.do
git add data-analysis.do
git commit -m "Add analysis file"
#+end_src

#+name: Results: create do files
#+RESULTS: Results: create do files
#+begin_src bash
[experiment 97b877e] Add some data analysis code
 1 file changed, 0 insertions(+), 0 deletions(-)
 create mode 100644 data-analysis.do
#+end_src

We then add some code to the analysis file.
Then we commit the change.
#+name: commit changes to the do file
#+caption: commit changes to the do file
#+begin_src bash :dir /tmp/contest-project :results output replace code
git commit -am "Add very basic analysis code."
#+end_src

#+name: Results: commit changes to the do file
#+RESULTS: Results: commit changes to the do file
#+begin_src bash
[experiment 080a948] Add very basic analysis code.
 1 file changed, 47 insertions(+)
#+end_src
Now check log.
#+name: checkout log after analysis code
#+caption: checkout log after analysis code
#+begin_src bash :dir /tmp/contest-project :results output replace code
git log
#+end_src

#+name: Results: checkout log after analysis code
#+RESULTS: Results: checkout log after analysis code
#+begin_src bash
commit 080a94895202243ee8c0c07e4afc41b8a39a2bc7
Author: Yaoni <wyatsky@gmail.com>
Date:   Tue Jun 23 16:03:28 2020 +1000

    Add very basic analysis code.

commit 97b877ebd3140cd17543aebf4ea135549291b83f
Author: Yaoni <wyatsky@gmail.com>
Date:   Tue Jun 23 15:58:52 2020 +1000

    Add some data analysis code

commit 508081abcde3a7444d258f7fd3c7d5bcbd165080
Author: Yaoni <wyatsky@gmail.com>
Date:   Tue Jun 23 15:34:13 2020 +1000

    Basic template for the main paper.

commit ed1e777e7c5109b12e20dac0b4c59728a4ffea60
Author: Yaoni <wyatsky@gmail.com>
Date:   Tue Jun 23 15:25:26 2020 +1000

    Add main paper and main-data file.
#+end_src

We now decide this code is good enough and want to merge it to our master branch (main paper).
We go back to our master branch.
#+name: merge into master
#+caption: merge into master
#+begin_src bash :dir /tmp/contest-project :results output replace code
git checkout master
git log
#+end_src

#+name: Results: merge into master
#+RESULTS: Results: merge into master
#+begin_src bash
commit 508081abcde3a7444d258f7fd3c7d5bcbd165080
Author: Yaoni <wyatsky@gmail.com>
Date:   Tue Jun 23 15:34:13 2020 +1000

    Basic template for the main paper.

commit ed1e777e7c5109b12e20dac0b4c59728a4ffea60
Author: Yaoni <wyatsky@gmail.com>
Date:   Tue Jun 23 15:25:26 2020 +1000

    Add main paper and main-data file.
#+end_src
#+name: git merge into master 2
#+caption: git merge into master 2
#+begin_src bash :dir /tmp/contest-project :results output replace code
git merge experiment
#+end_src

#+name: Results: git merge into master 2
#+RESULTS: Results: git merge into master 2
#+begin_src bash
Updating 508081a..080a948
Fast-forward
 data-analysis.do | 47 +++++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 47 insertions(+)
 create mode 100644 data-analysis.do
#+end_src

Now we checkout our master branch again.
It now has code from the experiment branch.
#+name: checkout master branch again
#+caption: checkout master branch again
#+begin_src bash :dir /tmp/contest-project :results output replace code
git log
#+end_src

#+name: Results: checkout master branch again
#+RESULTS: Results: checkout master branch again
#+begin_src bash
commit 080a94895202243ee8c0c07e4afc41b8a39a2bc7
Author: Yaoni <wyatsky@gmail.com>
Date:   Tue Jun 23 16:03:28 2020 +1000

    Add very basic analysis code.

commit 97b877ebd3140cd17543aebf4ea135549291b83f
Author: Yaoni <wyatsky@gmail.com>
Date:   Tue Jun 23 15:58:52 2020 +1000

    Add some data analysis code

commit 508081abcde3a7444d258f7fd3c7d5bcbd165080
Author: Yaoni <wyatsky@gmail.com>
Date:   Tue Jun 23 15:34:13 2020 +1000

    Basic template for the main paper.

commit ed1e777e7c5109b12e20dac0b4c59728a4ffea60
Author: Yaoni <wyatsky@gmail.com>
Date:   Tue Jun 23 15:25:26 2020 +1000

    Add main paper and main-data file.
#+end_src

Now that our code in the project has been updated.
We want it to be updated in the ~conference~ branch as well
so that we can use the newest code for the Sydney conference.

To do that, we can simply do a ~git rebase~.
#+name: checkout conference for rebase
#+caption: checkout conference for rebase
#+begin_src bash :dir /tmp/contest-project :results output replace code
git checkout syd-conference
git log
#+end_src

#+name: Results: checkout conference for rebase
#+RESULTS: Results: checkout conference for rebase
#+begin_src bash
commit a3df94b94279d7b14df06787d414c505ce6396ed
Author: Yaoni <wyatsky@gmail.com>
Date:   Tue Jun 23 15:48:10 2020 +1000

    Add content for sydney conference

commit 508081abcde3a7444d258f7fd3c7d5bcbd165080
Author: Yaoni <wyatsky@gmail.com>
Date:   Tue Jun 23 15:34:13 2020 +1000

    Basic template for the main paper.

commit ed1e777e7c5109b12e20dac0b4c59728a4ffea60
Author: Yaoni <wyatsky@gmail.com>
Date:   Tue Jun 23 15:25:26 2020 +1000

    Add main paper and main-data file.
#+end_src
List files.
#+name: list files
#+caption: list files
#+begin_src bash :dir /tmp/contest-project :results output replace code
ls
#+end_src

#+name: Results: list files
#+RESULTS: Results: list files
#+begin_src bash
data
main-paper.tex
syd-conference
#+end_src

Do a rebase to update the content in the ~conference~ branch.
#+name: git rebase
#+caption: git rebase
#+begin_src bash :dir /tmp/contest-project :results output replace code
git rebase master
#+end_src

#+name: Results: git rebase
#+RESULTS: Results: git rebase
#+begin_src bash
First, rewinding head to replay your work on top of it...
Applying: Add content for sydney conference
#+end_src
Now we check our files again.
#+name: check conference files again
#+caption: check conference files again
#+begin_src bash :dir /tmp/contest-project :results output replace code
ls
#+end_src

#+name: Results: check conference files again
#+RESULTS: Results: check conference files again
#+begin_src bash
data
data-analysis.do
main-paper.tex
syd-conference
#+end_src
Check our log.

#+name: check log in the conference branch
#+caption: check log in the conference branch
#+begin_src bash :dir /tmp/contest-project :results output replace code
git log
#+end_src

#+name: Results: check log in the conference branch
#+RESULTS: Results: check log in the conference branch
#+begin_src bash
commit 6e5b0ab5e317772d0acc282b86d19d31e9e2ea91
Author: Yaoni <wyatsky@gmail.com>
Date:   Tue Jun 23 15:48:10 2020 +1000

    Add content for sydney conference

commit 080a94895202243ee8c0c07e4afc41b8a39a2bc7
Author: Yaoni <wyatsky@gmail.com>
Date:   Tue Jun 23 16:03:28 2020 +1000

    Add very basic analysis code.

commit 97b877ebd3140cd17543aebf4ea135549291b83f
Author: Yaoni <wyatsky@gmail.com>
Date:   Tue Jun 23 15:58:52 2020 +1000

    Add some data analysis code

commit 508081abcde3a7444d258f7fd3c7d5bcbd165080
Author: Yaoni <wyatsky@gmail.com>
Date:   Tue Jun 23 15:34:13 2020 +1000

    Basic template for the main paper.

commit ed1e777e7c5109b12e20dac0b4c59728a4ffea60
Author: Yaoni <wyatsky@gmail.com>
Date:   Tue Jun 23 15:25:26 2020 +1000

    Add main paper and main-data file.
#+end_src
We can now continue our work in the ~conference~ branch.

Or we can go back to the ~master~ branch and continue working on our project.
#+name: go back to master
#+caption: go back to master
#+begin_src bash :dir /tmp/contest-project :results output replace code
git checkout master
git log
#+end_src

#+name: Results: go back to master
#+RESULTS: Results: go back to master
#+begin_src bash
commit 080a94895202243ee8c0c07e4afc41b8a39a2bc7
Author: Yaoni <wyatsky@gmail.com>
Date:   Tue Jun 23 16:03:28 2020 +1000

    Add very basic analysis code.

commit 97b877ebd3140cd17543aebf4ea135549291b83f
Author: Yaoni <wyatsky@gmail.com>
Date:   Tue Jun 23 15:58:52 2020 +1000

    Add some data analysis code

commit 508081abcde3a7444d258f7fd3c7d5bcbd165080
Author: Yaoni <wyatsky@gmail.com>
Date:   Tue Jun 23 15:34:13 2020 +1000

    Basic template for the main paper.

commit ed1e777e7c5109b12e20dac0b4c59728a4ffea60
Author: Yaoni <wyatsky@gmail.com>
Date:   Tue Jun 23 15:25:26 2020 +1000

    Add main paper and main-data file.
#+end_src

We all make some stupid mistakes that destroy $LaTeX$.
We can use ~git checkout .~.

Sometimes we want to put all of our current changes away so that we can quickly note down our new thoughts. We can use ~git stash~ to put everything aside, and work on the new ideas that just pop up.

Though we don't say it, we often want to know who wrote which part.
And we can use ~git blame~ to find our, line-by-line, who wrote which in the latest commit.
** Email                                                          :noexport:
:PROPERTIES:
:ID:       f73ec4e6-2943-4678-9467-9a7235168fb4
:END:
:LOGBOOK:
CLOCK: [2020-06-17 Wed 21:13]--[2020-06-17 Wed 21:42] =>  0:29
CLOCK: [2020-06-11 Thu 09:31]--[2020-06-11 Thu 10:04] =>  0:33
:END:
Following our discussion yesterday, I'm thinking about starting a workshop to share some of the tools that I think could make research easier.
Here is 3 pain points that I think are most frustrating in doing research (or any text-related work really). Could you please have a look and let me know if they fit your pain points?
1. No more "paper-final-final-final-final.tex"
2. No more spending 30 minutes on "who changed this" questions
3. No more spending 30 minutes on "when/why did we change this" questions
** Misc                                                           :noexport:
:LOGBOOK:
CLOCK: [2020-06-23 Tue 15:15]--[2020-06-23 Tue 15:16] =>  0:01
CLOCK: [2020-06-23 Tue 14:17]--[2020-06-23 Tue 14:19] =>  0:02
CLOCK: [2020-06-23 Tue 13:57]--[2020-06-23 Tue 14:17] =>  0:20
:END:
